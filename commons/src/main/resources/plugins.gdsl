/**
 * This script adds support for IntelliJ IDEA to add properties/methods/constructors where these are
 * dynamically injected.
 */
contributor(context()) {
	// Testing
	classType?.getAnnotations("com.adaptc.mws.plugins.testing.TestFor").each {
		String className = it?.findAttributeValue("value")?.getClassNameText()
		if (className.endsWith("Plugin")) {
			property name:"plugin", type:className, doc:"The plugin under test"
			delegatesTo(findClass("com.adaptc.mws.plugins.testing.PluginUnitTestMixin").getNavigationElement())
		} else if (className.endsWith("Translator")) {
			property name:"translator", type:className, doc:"The translator under test"
			delegatesTo(findClass("com.adaptc.mws.plugins.testing.TranslatorUnitTestMixin").getNavigationElement())
		} else {
			// Assume component
			property name:"component", type:className, doc:"The component under test"
			delegatesTo(findClass("com.adaptc.mws.plugins.testing.ComponentUnitTestMixin").getNavigationElement())
		}
	}

	// Event enumerations
	if (classType.hasAnnotation("com.adaptc.mws.plugins.EventEnumeration")) {
		property name:"eventName", type:String.name
		property name:"severity", type:"com.adaptc.mws.plugins.IPluginEventService.Severity"
		property name:"escalationLevel", type:"com.adaptc.mws.plugins.IPluginEventService.EscalationLevel"
		method name:"getEventCode", type:"int"
		method name:"getEventType", type:String.name
		method name:"getOriginSuffix", type:String.name
		method name:"getMessageCode", type:String.name
		method name:"getCommentCode", type:String.name
		// This doesn't seem to work, may be because it's an enum and not a regular class
		// See http://youtrack.jetbrains.com/issue/IDEA-72458
		constructor params:[eventName:String.name,
				severity:"com.adaptc.mws.plugins.IPluginEventService.Severity",
				escalationLevel:"com.adaptc.mws.plugins.IPluginEventService.EscalationLevel"]
	}

	if (classType?.name?.endsWith("Plugin")) {
		property name:"config", type:Map.name
		property name:"appConfig", type:ConfigObject.name
		property name:"log", type:"org.apache.commons.logging.Log"
	}
	if (classType?.name?.endsWith("Translator")) {
		property name:"log", type:"org.apache.commons.logging.Log"
	}
}